import yfinance as yf
import pandas as pd
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

st.set_page_config(page_title="BIST Dashboard", layout="wide")

# â€”â€”â€” Resmi ve DetaylÄ± BaÅŸlÄ±k + AÃ§Ä±klama â€”â€”â€”
st.markdown("""
# ðŸ“ˆ Borsa Ä°stanbul Hisse Senedi Analiz Paneli

Bu platform, seÃ§ili Borsa Ä°stanbul hisselerine iliÅŸkin temel teknik analiz verilerini sade ve anlaÅŸÄ±lÄ±r bir ÅŸekilde sunmayÄ± amaÃ§lamaktadÄ±r.  
KullanÄ±cÄ±lar, aÅŸaÄŸÄ±daki seÃ§eneklerden bir hisse senedi seÃ§erek ilgili hisseye ait fiyat, hacim ve teknik gÃ¶stergeleri takip edebilirler.

---
""")

st.title("ðŸ“Š Borsa Ä°stanbul Dashboard")

# â€”â€”â€” Sidebarâ€™da Bilgilendirme Kutusu â€”â€”â€”
with st.sidebar:
    st.header("ðŸ“Œ Panel HakkÄ±nda")
    st.markdown("""
    Bu uygulama **Streamlit** kullanÄ±larak geliÅŸtirilmiÅŸtir.  
    Veriler **yfinance** kÃ¼tÃ¼phanesi aracÄ±lÄ±ÄŸÄ±yla gerÃ§ek zamanlÄ± olarak Ã§ekilmektedir.

    Teknik gÃ¶stergeler:
    - **MA20**: 20 gÃ¼nlÃ¼k hareketli ortalama
    - **RSI**: GÃ¶receli GÃ¼Ã§ Endeksi (14 gÃ¼nlÃ¼k)
    
    GÃ¶stergeler yatÄ±rÄ±m kararÄ± vermek iÃ§in referans niteliÄŸindedir.
    """)

tickers = ["ASELS.IS", "THYAO.IS", "SISE.IS", "KRDMD.IS", "BIMAS.IS", 
    "GARAN.IS", "EREGL.IS", "FROTO.IS", "ISCTR.IS", "YKBNK.IS",
    "AKBNK.IS", "VAKBN.IS", "TOASO.IS", "PETKM.IS", "SAHOL.IS",
    "TCELL.IS", "TTKOM.IS", "KCHOL.IS", "TUPRS.IS", "KOZAA.IS",
    "PGSUS.IS", "TAVHL.IS", "ARCLK.IS", "ALARK.IS", "MGROS.IS",
    "VESTL.IS"]
ticker = st.selectbox("Hisse SeÃ§iniz", tickers)

# Veri Ã§ek
df = yf.download(ticker, period="6mo", auto_adjust=True)

# Ã‡ok katmanlÄ± sÃ¼tunlarÄ± dÃ¼zleÅŸtir
if isinstance(df.columns, pd.MultiIndex):
    df.columns = df.columns.droplevel(1)

# Tablo gÃ¶sterimi
st.write("Son 5 GÃ¼nlÃ¼k Veri:")
st.write(df.tail())

# Teknik gÃ¶stergeler
df["MA20"] = df["Close"].rolling(window=20).mean()

delta = df["Close"].diff()
gain = delta.where(delta > 0, 0)
loss = -delta.where(delta < 0, 0)
avg_gain = gain.rolling(window=14).mean()
avg_loss = loss.rolling(window=14).mean()
rs = avg_gain / avg_loss
rs = rs.replace([np.inf, -np.inf], np.nan)
df["RSI"] = 100 - (100 / (1 + rs))

# Grafikler
st.subheader("ðŸ“ˆ KapanÄ±ÅŸ ve MA20")
st.line_chart(df[["Close", "MA20"]])

st.subheader("ðŸ“Š Hacim")
st.bar_chart(df["Volume"])

st.subheader("ðŸ“‰ RSI")
st.line_chart(df["RSI"])



